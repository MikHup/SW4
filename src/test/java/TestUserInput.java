import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import sw4.FilesUtil;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import static org.junit.jupiter.api.Assertions.assertEquals;public class TestUserInput {    private boolean playFile = true;    private boolean prettyPrint = false;    private boolean createMidiFile = false;    private String fileName = null;    private PrintStream outTemp = System.out;    private PrintStream errTemp = System.err;    private ByteArrayOutputStream outMessage = new ByteArrayOutputStream();    private ByteArrayOutputStream errMessage = new ByteArrayOutputStream();    @BeforeEach    void setSystemOut() {        System.setOut(new PrintStream(outMessage));        System.setErr(new PrintStream(errMessage));    }    @AfterEach    void resetSystemOut() {        System.setOut(outTemp);        System.setErr(errTemp);    }    private void runInput(String consoleInput) {        if(consoleInput.equals("help")){            System.out.println("Help:");            System.out.println("To compile a input file, type: 'jaml' followed by the filepath to a jaml file");            System.out.println("Example: 'jaml C:/folder/filename.jaml'");            System.out.println();            System.out.println("The default behavior of the compiler is to play back the given input, without generating a midifile to disk");            System.out.println("To change this behavior, make use of the following compiler options");            System.out.println();            System.out.println("Compiler options:");            System.out.println("    -Stop");            System.out.println("    -Midi");            System.out.println("    -Print");            System.out.println();            System.out.println("The 'Stop' option cancels the playback of the input");            System.out.println("The 'Midi' option generates a midi file at the same location of the input file");            System.out.println("The 'Print' option print the ast nodes generated from the input file");            System.out.println();            System.out.println("Example: 'jaml C:/folder/filename.jaml -stop -midi -print'");            System.out.println();            System.out.println("To stop the program type 'exit' or 'quit'");            System.out.println();        }        else if(consoleInput.toLowerCase().equals("quit") || consoleInput.toLowerCase().toLowerCase().equals("exit")){            System.exit(0);        }        else if(consoleInput.toLowerCase().startsWith("jaml")){            consoleInput = consoleInput.replace("\\", "\\\\");            String inputArray[] = consoleInput.split(" ");            if(FilesUtil.isFilenameValid(inputArray[1])){                fileName = inputArray[1];            }            else{                System.err.println("Filepath: '" + inputArray[1] + "' is invalid");                System.err.println("Type 'help' for instructions");            }            for(int i = 0; i < inputArray.length - 2; i++)                switch (inputArray[i+2].toLowerCase()){                    case "-midi":                        createMidiFile = true;                        break;                    case "-print":                        prettyPrint = true;                        break;                    case "-stop":                        playFile = false;                        break;                    default:                        System.err.println("Input command: '" + inputArray[i+2] + "' could not be recognized");                        System.err.println("Type 'help' for instructions");                }            if (prettyPrint) {                System.out.println("PrettyPrint = true");            }            if (!playFile) {                System.out.println("!playFile = false");            }            if (createMidiFile) {                System.out.println("createMidiFile = true");            }        }        else{            System.err.println("Input command: '" + consoleInput + "' is invalid");            System.err.println("Type 'help' for instructions");        }    }    @Test    void testIllegalCommand() {        runInput("testCommand");        String testResult = "Input command: 'testCommand' is invalid\r\n" +                "Type 'help' for instructions\r\n";        assertEquals(testResult, errMessage.toString());    }    @Test    void testHelpCommand() {        runInput("help");        String testResult = "Help:\r\n" +                "To compile a input file, type: 'jaml' followed by the filepath to a jaml file\r\n" +                "Example: 'jaml C:/folder/filename.jaml'\r\n" +                "\r\n" +                "The default behavior of the compiler is to play back the given input, without generating a midifile to disk\r\n" +                "To change this behavior, make use of the following compiler options\r\n" +                "\r\n" +                "Compiler options:\r\n" +                "    -Stop\r\n" +                "    -Midi\r\n" +                "    -Print\r\n" +                "\r\n" +                "The 'Stop' option cancels the playback of the input\r\n" +                "The 'Midi' option generates a midi file at the same location of the input file\r\n" +                "The 'Print' option print the ast nodes generated from the input file\r\n" +                "\r\n" +                "Example: 'jaml C:/folder/filename.jaml -stop -midi -print'\r\n" +                "\r\n" +                "To stop the program type 'exit' or 'quit'\r\n" +                "\r\n";        assertEquals(testResult, outMessage.toString());    }    @Test    void testIllegalFile() {        runInput("jaml nonExistingFile.txt");        String testResult = "Filepath: 'nonExistingFile.txt' is invalid\r\n" +                "Type 'help' for instructions\r\n";        assertEquals(testResult, errMessage.toString());    }    @Test    void testLegalFile() {        runInput("jaml src/test/java/GeneralTestFilesWithErrors/testLegalFile.txt");        String testResult = "";        assertEquals(testResult, outMessage.toString());    }    @Test    void testLegalFilePrint() {        runInput("jaml src/test/java/GeneralTestFilesWithErrors/testLegalFile.txt -print");        String testResult = "PrettyPrint = true\r\n";        assertEquals(testResult, outMessage.toString());    }    @Test    void testLegalFileStop() {        runInput("jaml src/test/java/GeneralTestFilesWithErrors/testLegalFile.txt -stop");        String testResult = "!playFile = false\r\n";        assertEquals(testResult, outMessage.toString());    }    @Test    void testLegalFileMidi() {        runInput("jaml src/test/java/GeneralTestFilesWithErrors/testLegalFile.txt -midi");        String testResult = "createMidiFile = true\r\n";        assertEquals(testResult, outMessage.toString());    }    @Test    void testLegalFileIllegalFlag() {        runInput("jaml src/test/java/GeneralTestFilesWithErrors/testLegalFile.txt -p");        String testResult = "Input command: '-p' could not be recognized\r\n" +                "Type 'help' for instructions\r\n";        assertEquals(testResult, errMessage.toString());    }    @Test    void testLegalFileIllegalUndefinedFlag() {        runInput("jaml src/test/java/GeneralTestFilesWithErrors/testLegalFile.txt print");        String testResult = "Input command: 'print' could not be recognized\r\n" +                "Type 'help' for instructions\r\n";        assertEquals(testResult, errMessage.toString());    }}